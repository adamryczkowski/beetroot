
function(_add_property_to_db __DB_NAME __KEY_TO_FIX __PROPERTY_NAME __NEW_ITEMS )
	string(REPLACE "-" "_" __KEY "${__KEY_TO_FIX}")
	_get_db_columns(__COLS)
	if(NOT __COLS_${__PROPERTY_NAME})
		message(FATAL_ERROR "Internal Beetroot error: Cannot find the property ${__PROPERTY_NAME}")
	endif()
	if(NOT "${__COLS_${__PROPERTY_NAME}}" STREQUAL "${__DB_NAME}")
		message(FATAL_ERROR "Wrong database name for property ${__PROPERTY_NAME}. Should be ${__COLS_${__PROPERTY_NAME}} but got ${__DB_NAME}")
	endif()
	if("${__DB_NAME}" STREQUAL "GLOBAL" AND NOT "${__KEY}" STREQUAL "ALL")
		message(FATAL_ERROR "Internal beetroot error: calling _add_property_to_db for global db requires key=\"ALL\"")
	endif()

	get_property(__ITEMS GLOBAL PROPERTY __${__DB_NAME}_${__KEY}_${__PROPERTY_NAME})
#	message(STATUS "_add_property_to_db(): Existing items in __${__DB_NAME}_${__KEY}_${__PROPERTY_NAME}: ${__ITEMS}")
	foreach(__SINGLE_ITEM IN LISTS __NEW_ITEMS)
		if(NOT ${__SINGLE_ITEM} IN_LIST __ITEMS)
			set_property(GLOBAL APPEND PROPERTY __${__DB_NAME}_${__KEY}_${__PROPERTY_NAME} "${__SINGLE_ITEM}")
		endif()
	endforeach()
#	get_property(__ITEMS GLOBAL PROPERTY __${__DB_NAME}_${__KEY}_${__PROPERTY_NAME})
#	message(STATUS "_add_property_to_db(): AFTER existing items in __${__DB_NAME}_${__KEY}_${__PROPERTY_NAME}: ${__ITEMS}")
endfunction()

function(_remove_property_from_db __DB_NAME __KEY_TO_FIX __PROPERTY_NAME __ITEM )
	string(REPLACE "-" "_" __KEY "${__KEY_TO_FIX}")
	_get_db_columns(__COLS)
	if(NOT __COLS_${__PROPERTY_NAME})
		message(FATAL_ERROR "Internal Beetroot error: Cannot find the property ${__PROPERTY_NAME}")
	endif()
	if(NOT "${__COLS_${__PROPERTY_NAME}}" STREQUAL "${__DB_NAME}")
		message(FATAL_ERROR "Wrong database name for property ${__PROPERTY_NAME}. Should be ${__COLS_${__PROPERTY_NAME}} but got ${__DB_NAME}")
	endif()
	if("${__DB_NAME}" STREQUAL "GLOBAL" AND NOT "${__KEY}" STREQUAL "ALL")
		message(FATAL_ERROR "Internal beetroot error: calling _remove_property_from_db for global db requires key=\"ALL\"")
	endif()

	get_property(__ITEMS GLOBAL PROPERTY __${__DB_NAME}_${__KEY}_${__PROPERTY_NAME})
	if(${__ITEM} IN_LIST __ITEMS)
		list(REMOVE_ITEM __ITEMS "${__ITEM}")
		set_property(GLOBAL PROPERTY __${__DB_NAME}_${__KEY}_${__PROPERTY_NAME} "${__ITEMS}")
	elseif("${ARGN}" STREQUAL "")
		message(FATAL_ERROR "Item ${__ITEM} does not exist in the __${__DB_NAME}_${__KEY}_${__PROPERTY_NAME}")
	endif()
endfunction()

function(_set_property_to_db __DB_NAME __KEY_TO_FIX __PROPERTY_NAME __PROPERTY_VALUE )
	if(ARGV4)
		set(__FORCE 1)
	else()
		set(__FORCE 0)
	endif()
	string(REPLACE "-" "_" __KEY "${__KEY_TO_FIX}")
	if("${__PROPERTY_NAME}" STREQUAL "F_FEATURES")
		message(WARNING "_set_property_to_db(): __DB_NAME: ${__DB_NAME} __KEY: ${__KEY_TO_FIX} ${__PROPERTY_NAME}: \"${__PROPERTY_VALUE}\"")
	endif()
	_get_db_columns(__COLS)
	if(NOT __COLS_${__PROPERTY_NAME})
		message(FATAL_ERROR "Internal Beetroot error: Cannot find the property ${__PROPERTY_NAME}")
	endif()
	if(NOT "${__COLS_${__PROPERTY_NAME}}" STREQUAL "${__DB_NAME}")
		message(FATAL_ERROR "Wrong database name for property ${__PROPERTY_NAME}. Should be ${__COLS_${__PROPERTY_NAME}} but got ${__DB_NAME}")
	endif()
	if("${__DB_NAME}" STREQUAL "GLOBAL" AND NOT "${__KEY}" STREQUAL "ALL")
		message(FATAL_ERROR "Internal beetroot error: calling _set_property_to_db for global db requires key=\"ALL\"")
	endif()

	get_property(__TMP GLOBAL PROPERTY __${__DB_NAME}_${__KEY}_${__PROPERTY_NAME})
	if(__TMP AND NOT __FORCE)
		if(NOT "${__TMP}" STREQUAL "${__PROPERTY_VALUE}")
			message(FATAL_ERROR "Internal beetroot error. Trying to re-write __${__DB_NAME}_${__KEY}_${__PROPERTY_NAME} with a new value \"${__PROPERTY_VALUE}\" that is different from the old value \"${__TMP}\".")
		endif()
	else()
#		message(STATUS "_set_property_to_db(): Setting __${__DB_NAME}_${__KEY}_${__PROPERTY_NAME} to ${__PROPERTY_VALUE}")
		set_property(GLOBAL PROPERTY __${__DB_NAME}_${__KEY}_${__PROPERTY_NAME} "${__PROPERTY_VALUE}")
	endif()
endfunction()

function(_retrieve_instance_data __INSTANCE_ID __PROPERTY __OUT)
	if(NOT __INSTANCE_ID)
		message(FATAL_ERROR "Internal beetroot error: key cannot be empty")
	endif()
	_get_db_columns(__COLS)
#	if("${__PROPERTY}" STREQUAL "INSTALL_DIR")
#		message(STATUS "_retrieve_instance_data(): trying to get property ${__PROPERTY} using __INSTANCE_ID ${__INSTANCE_ID}...")
#	endif()
	if(NOT __COLS_${__PROPERTY})
		message(FATAL_ERROR "Internal Beetroot error: Cannot find the property ${__PROPERTY}")
	endif()
	if("${__COLS_${__PROPERTY}}" STREQUAL "INSTANCEDB")
		set(__KEY "${__INSTANCE_ID}")
	elseif("${__COLS_${__PROPERTY}}" STREQUAL "FEATUREBASEDB")
		_retrieve_instance_data(${__INSTANCE_ID} FEATUREBASE __KEY)
#		message(STATUS "_retrieve_instance_data(): __INSTANCE_ID: ${__INSTANCE_ID} get FEATUREBASE: ${__KEY}")
	elseif("${__COLS_${__PROPERTY}}" STREQUAL "FILEDB")
		_retrieve_instance_data(${__INSTANCE_ID} T_PATH __PATH)
		_make_path_hash("${__PATH}" __KEY)
	elseif("${__COLS_${__PROPERTY}}" STREQUAL "TEMPLATEDB")
		_retrieve_instance_data(${__INSTANCE_ID} I_TEMPLATE_NAME __KEY)
#		message(STATUS "_retrieve_instance_data(): __INSTANCE_ID: ${__INSTANCE_ID} got I_TEMPLATE_NAME: ${__KEY}")
	else()
		message(FATAL_ERROR "Internal Beetroot error: Cannot find the database ${__COLS_${__PROPERTY}} indicated by variable __COLS_${__PROPERTY}")
	endif()
	if("${__KEY}" STREQUAL "")
		message(FATAL_ERROR "Internal beetroot error: missing key for db ${__COLS_${__PROPERTY}} when accessing property ${__PROPERTY}")
	endif()
#	if("${__PROPERTY}" STREQUAL "INSTALL_DIR")
#		message(STATUS "_retrieve_instance_data(): trying to get property ${__PROPERTY} using KEY ${__KEY}...")
#	endif()
	string(REPLACE "-" "_" __KEY_FIXED "${__KEY}")
	get_property(__TMP GLOBAL PROPERTY __${__COLS_${__PROPERTY}}_${__KEY_FIXED}_${__PROPERTY})
	if("${__TMP}" STREQUAL "")
#		message(WARNING "__${__COLS_${__PROPERTY}}_${__KEY_FIXED}_${__PROPERTY} is not defined")
	endif()
#	message(STATUS "_retrieve_instance_data(): __${__COLS_${__PROPERTY}}_${__KEY_FIXED}_${__PROPERTY} is ${__TMP}")
	set(${__OUT} "${__TMP}" PARENT_SCOPE)
endfunction()

function(_retrieve_featurebase_data __FEATUREBASE_ID __PROPERTY __OUT)
	if(NOT __FEATUREBASE_ID)
		message(FATAL_ERROR "Internal beetroot error: key cannot be empty")
	endif()
	_get_db_columns(__COLS)
	if(NOT __COLS_${__PROPERTY})
		message(FATAL_ERROR "Internal Beetroot error: Cannot find the property ${__PROPERTY}")
	endif()
	if("${__COLS_${__PROPERTY}}" STREQUAL "INSTANCEDB")
		message(FATAL_ERROR "Internal error: Cannot retrieve instance column using template name")
	elseif("${__COLS_${__PROPERTY}}" STREQUAL "FEATUREBASEDB")
		set(__KEY "${__FEATUREBASE_ID}")
	elseif("${__COLS_${__PROPERTY}}" STREQUAL "FILEDB")
		_retrieve_featurebase_data(${__FEATUREBASE_ID} F_PATH __PATH)
		_make_path_hash("${__PATH}" __KEY)
	elseif("${__COLS_${__PROPERTY}}" STREQUAL "TEMPLATEDB")
		_retrieve_instance_data(${__INSTANCE_ID} F_TEMPLATE_NAME __KEY)
		list(LENGTH __KEY __KEYS_COUNT)
		if(NOT ${__KEYS_COUNT} EQUAL 1)
			message(FATAL_ERROR "Internal Beetroot error: Cannot get key template_name for ${__PROPERTY}, because there is more than one template associated with the featurebase ${__FEATUREBASE_ID}")
		endif()
	else()
		message(FATAL_ERROR "Internal Beetroot error: Cannot find the database ${__COLS_${__PROPERTY}} indicated by variable __COLS_${__PROPERTY}")
	endif()
	string(REPLACE "-" "_" __KEY_FIXED "${__KEY}")
	get_property(__TMP GLOBAL PROPERTY __${__COLS_${__PROPERTY}}_${__KEY_FIXED}_${__PROPERTY})
	set(${__OUT} "${__TMP}" PARENT_SCOPE)
endfunction()

function(_retrieve_file_data __PATH_HASH __PROPERTY __OUT)
	if(NOT __PATH_HASH)
		message(FATAL_ERROR "Internal beetroot error: key cannot be empty")
	endif()
	_get_db_columns(__COLS)
	if(NOT __COLS_${__PROPERTY})
		message(FATAL_ERROR "Internal Beetroot error: Cannot find the property ${__PROPERTY}")
	endif()
	if("${__COLS_${__PROPERTY}}" STREQUAL "INSTANCEDB")
		message(FATAL_ERROR "Internal error: Cannot retrieve instance column using file path")
	elseif("${__COLS_${__PROPERTY}}" STREQUAL "FEATUREBASEDB")
		_retrieve_file_data("${__PATH_HASH}" TARGET_FIXED __TARGET_FIXED)
		if(__TARGET_FIXED)
			_retrieve_file_data("${__PATH_HASH}" G_FEATUREBASES __FEATUREBASE_ID)
			_retrieve_featurebase_data(${__FEATUREBASE_ID} ${__PROPERTY} __OUT_INNER)
			set(${__OUT} "${__OUT_INNER}" PARENT_SCOPE)
			return()
		else()
			message(FATAL_ERROR "Internal error: Cannot retrieve featurebase column using file path unless file is TARGET_FIXED")
		endif()
	elseif("${__COLS_${__PROPERTY}}" STREQUAL "TEMPLATEDB")
		message(FATAL_ERROR "Internal Beetroot error: Cannot get key template_name for ${__PROPERTY} from file")
	elseif("${__COLS_${__PROPERTY}}" STREQUAL "FILEDB")
		get_property(__TMP GLOBAL PROPERTY __${__COLS_${__PROPERTY}}_${__PATH_HASH}_${__PROPERTY})
		set(${__OUT} "${__TMP}" PARENT_SCOPE)
	else()
		message(FATAL_ERROR "Internal Beetroot error: Cannot find the database ${__COLS_${__PROPERTY}} indicated by variable __COLS_${__PROPERTY}")
	endif()
endfunction()

function(_retrieve_template_data __TEMPLATE_NAME_TO_FIX __PROPERTY __OUT)
	string(REPLACE "-" "_" __TEMPLATE_NAME "${__TEMPLATE_NAME_TO_FIX}")

	if(NOT __TEMPLATE_NAME)
		message(FATAL_ERROR "Internal beetroot error: key cannot be empty")
	endif()
	_get_db_columns(__COLS)
	if(NOT __COLS_${__PROPERTY})
		message(FATAL_ERROR "Internal Beetroot error: Cannot find the property ${__PROPERTY}")
	endif()
	if("${__COLS_${__PROPERTY}}" STREQUAL "INSTANCEDB")
		message(FATAL_ERROR "Internal error: Cannot retrieve instance column using template name")
	elseif("${__COLS_${__PROPERTY}}" STREQUAL "FEATUREBASEDB")
		_retrieve_template_data("${__TEMPLATE_NAME}" T_PATH __PATH)
		_make_path_hash("${__PATH}" __PATH_HASH)
		_retrieve_file_data("${__PATH_HASH}" TARGET_FIXED __TARGET_FIXED)
		if(__TARGET_FIXED)
			_retrieve_file_data("${__PATH_HASH}" G_FEATUREBASES __KEY)
		else()
			message(FATAL_ERROR "Internal error: Cannot retrieve featurebase column using file path unless file is TARGET_FIXED")
		endif()
	elseif("${__COLS_${__PROPERTY}}" STREQUAL "FILEDB")
		_retrieve_template_data("${__TEMPLATE_NAME}" T_PATH __PATH)
		_make_path_hash("${__PATH}" __KEY)
	elseif("${__COLS_${__PROPERTY}}" STREQUAL "TEMPLATEDB")
		get_property(__TMP GLOBAL PROPERTY __${__COLS_${__PROPERTY}}_${__TEMPLATE_NAME}_${__PROPERTY})
#		message(STATUS "_retrieve_template_data(): __${__COLS_${__PROPERTY}}_${__TEMPLATE_NAME}_${__PROPERTY}: ${__TMP}")
		set(${__OUT} "${__TMP}" PARENT_SCOPE)
	else()
		message(FATAL_ERROR "Internal Beetroot error: Cannot find the database ${__COLS_${__PROPERTY}} indicated by variable __COLS_${__PROPERTY}")
	endif()
endfunction()

function(_retrieve_global_data __PROPERTY __OUT)
	_get_db_columns(__COLS)
	if(NOT __COLS_${__PROPERTY})
		message(FATAL_ERROR "Internal Beetroot error: Cannot find the property ${__PROPERTY}")
	endif()
	if(NOT "${__COLS_${__PROPERTY}}" STREQUAL "GLOBAL")
		message(FATAL_ERROR "Internal error: Cannot retrieve non-global value using _retrieve_global_data()")
	else()
		get_property(__TMP GLOBAL PROPERTY __${__COLS_${__PROPERTY}}_ALL_${__PROPERTY})
#		message(STATUS "_retrieve_template_data(): __${__COLS_${__PROPERTY}}_${__TEMPLATE_NAME}_${__PROPERTY}: ${__TMP}")
		set(${__OUT} "${__TMP}" PARENT_SCOPE)
	endif()
endfunction()

macro(_retrieve_file_args __PATH_HASH __PROPERTY __OUT)
	_retrieve_file_data("${__PATH_HASH}" ${__PROPERTY} __TMP_SER_VARS__LIST)
	_unserialize_variables(__TMP_SER_VARS ${__OUT})
endmacro()

macro(_retrieve_featurebase_args __FEATUREBASE_ID __PROPERTY __OUT)
	_retrieve_featurebase_data(${__FEATUREBASE_ID} ${__PROPERTY} __TMP_SER_VARS__LIST)
	_unserialize_variables(__TMP_SER_VARS ${__OUT})
endmacro()

macro(_retrieve_instance_args __INSTANCE_ID __PROPERTY __OUT)
	_retrieve_instance_data(${__INSTANCE_ID} ${__PROPERTY} __TMP_SER_VARS__LIST)
#	message(STATUS "_retrieve_instance_args(): __TMP_SER_VARS: ${__TMP_SER_VARS}")
	_unserialize_variables(__TMP_SER_VARS ${__OUT})
endmacro()

macro(_retrieve_instance_pars __INSTANCE_ID __OUT)
	_retrieve_instance_data(${__INSTANCE_ID} PARS __TMP_SER_PARS__LIST)
#	message(STATUS "_retrieve_instance_pars(): __TMP_SER_PARS: ${__TMP_SER_PARS}")
	_unserialize_parameters(__TMP_SER_PARS ${__OUT})
endmacro()



#Function ignores information about which parameters are modifiers.
function(_serialize_variables __ARGS __ARGS_LIST __OUT_SERIALIZED)
	set(OUT)
#	message(STATUS "_serialize_variables(): Serializing variables: ${${__ARGS}__LIST}...")
	foreach(__VAR IN LISTS __ARGS_LIST)
#		if("${__VAR}" STREQUAL "LIB_MYVAR")
#			message(FATAL_ERROR "OJOJ: ${__ARGS}_${__VAR}: ${${__ARGS}_${__VAR}}")
#		endif()
#		if("${__VAR}" STREQUAL "LIB_MYVAR" AND "${${__ARGS}_${__VAR}}" STREQUAL "KUC")
#			message(FATAL_ERROR "OJOJ: ${__ARGS}_${__VAR}: ${${__ARGS}_${__VAR}}")
#		endif()
		string(REPLACE ";" ":" ${__ARGS}_${__VAR} "${${__ARGS}_${__VAR}}")
		if(OUT)
			set(OUT "${OUT};")
		endif()
		set(OUT "${OUT}${__VAR};${${__ARGS}_${__VAR}}")
	endforeach()
	set(${__OUT_SERIALIZED} "${OUT}" PARENT_SCOPE)
#	message(STATUS "_serialize_variables():... serialized string: \"${OUT}\"")
endfunction()

#Function ignores information about which parameters are modifiers.
function(_serialize_parameters __PARS __OUT_SERIALIZED)
	set(OUT)
#	message(STATUS "_serialize_parameters(): Serializing variables: ${${__ARGS}__LIST}...")
	foreach(__PAR IN LISTS ${__PARS}__LIST)
		if(OUT)
			set(OUT "${OUT};")
		endif()
		set(OUT "${OUT}${__PAR};${${__PARS}_${__PAR}__CONTAINER};${${__PARS}_${__PAR}__TYPE}")
	endforeach()
	set(${__OUT_SERIALIZED} "${OUT}" PARENT_SCOPE)
#	message(STATUS "_serialize_parameters():... serialized string: \"${OUT}\"")
endfunction()

function(_unserialize_variables __SERIALIZED__REF __OUT_ARGS)
	set(__LIST)
	if(${__SERIALIZED__REF}__LIST)
#		message(STATUS "_unserialize_variables() ${__SERIALIZED__REF}__LIST: ${${__SERIALIZED__REF}__LIST} ")
		list(LENGTH ${__SERIALIZED__REF}__LIST __TMP)
		math(EXPR __ARGS_LENGTH "${__TMP} / 2 - 1")
		math(EXPR __ARGS_CHECK "${__TMP} % 2")
		if(NOT "${__ARGS_CHECK}" STREQUAL "0")
			message(FATAL_ERROR "Wrong number of elements in the serialized arguments ${${__SERIALIZED__REF}__LIST}. Expected number of elements divisible by 2, but got ${__TMP} elements.")
		endif()

		foreach(__VAR_NR RANGE "${__ARGS_LENGTH}")
			math(EXPR __TMP "${__VAR_NR}*2")
			list(GET ${__SERIALIZED__REF}__LIST ${__TMP} __VARNAME)
			list(APPEND __LIST ${__VARNAME})
		
			math(EXPR __TMP "${__VAR_NR}*2 + 1")
			list(GET ${__SERIALIZED__REF}__LIST ${__TMP} __VALUE)
			string(REPLACE ":" ";" __VALUE "${__VALUE}")
			set(${__OUT_ARGS}_${__VARNAME} "${__VALUE}" PARENT_SCOPE)
#			message(STATUS "_unserialize_variables(): __VARNAME: ${__VARNAME}, __VALUE: \"${__VALUE}\"")
		endforeach()
	endif()
	set(${__OUT_ARGS}__LIST "${__LIST}" PARENT_SCOPE)
endfunction()

function(_unserialize_parameters __SERIALIZED__REF __OUT_PARS)
	set(__LIST)
	if(${__SERIALIZED__REF}__LIST)
#		message(STATUS "_unserialize_parameters(): ${__SERIALIZED__REF}__LIST: ${${__SERIALIZED__REF}__LIST} ")
		list(LENGTH ${__SERIALIZED__REF}__LIST __TMP)
		math(EXPR __PARS_LENGTH "${__TMP} / 3 - 1")
		math(EXPR __PARS_CHECK "${__TMP} % 3")
		if(NOT "${__PARS_CHECK}" STREQUAL "0")
			message(FATAL_ERROR "Wrong number of elements in the serialized arguments ${${__SERIALIZED__REF}__LIST}. Expected number of elements divisible by 2, but got ${__TMP} elements.")
		endif()
		foreach(__PAR_NR RANGE "${__PARS_LENGTH}")
			math(EXPR __TMP "${__PAR_NR}*3")
			list(GET ${__SERIALIZED__REF}__LIST ${__TMP} __VARNAME)
			list(APPEND __LIST ${__VARNAME})
		
			math(EXPR __TMP "${__PAR_NR}*3 + 1")
			list(GET ${__SERIALIZED__REF}__LIST ${__TMP} __CONTAINER)
			set(${__OUT_PARS}_${__VARNAME}__CONTAINER "${__CONTAINER}" PARENT_SCOPE)

			math(EXPR __TMP "${__PAR_NR}*3 + 2")
			list(GET ${__SERIALIZED__REF}__LIST ${__TMP} __TYPE)
			set(${__OUT_PARS}_${__VARNAME}__TYPE "${__TYPE}" PARENT_SCOPE)
#			message(STATUS "_unserialize_parameters(): __VARNAME: ${__VARNAME}, __CONTAINER: ${__CONTAINER}, __TYPE: ${__TYPE}")
		endforeach()
	endif()
	set(${__OUT_PARS}__LIST "${__LIST}" PARENT_SCOPE)
#	message(STATUS "_unserialize_parameters(): ${__OUT_PARS}__LIST: ${__LIST}")
endfunction()

